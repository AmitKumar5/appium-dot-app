{
  "name": "appium",
  "description": "Automation for Apps.",
  "tags": [
    "automation",
    "javascript"
  ],
  "version": "0.0.12",
  "author": {
    "name": "appium-discuss@googlegroups.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/appium/appium.git"
  },
  "bugs": {
    "url": "https://github.com/appium/appium/issues"
  },
  "engines": [
    "node"
  ],
  "main": "./server.js",
  "bin": {
    "appium": "./app/bin.js",
    "instruments_client": "./instruments/client_bin.js"
  },
  "directories": {
    "lib": "./app"
  },
  "dependencies": {
    "underscore": "~1.4.3",
    "colors": "~0.6.0-1",
    "express": "~3.0.6",
    "argparse": "~0.1.10",
    "path": "~0.4.9",
    "rimraf": "~2.1.1",
    "uuid-js": "~0.7.4",
    "temp": "~0.5.0",
    "winston": "~0.6.2",
    "request": "~2.12.0",
    "bplist-parser": "~0.0.4",
    "bufferpack": "0.0.6",
    "node-bplist-creator": "~0.0.1",
    "node-uuid": "~1.4.0",
    "underscore.string": "~2.3.1",
    "glob": "~3.1.20",
    "unzip": "~0.1.1"
  },
  "scripts": {
    "test": "grunt lint unit",
    "start": "node server.js"
  },
  "devDependencies": {
    "mocha": "~1.8.1",
    "should": "~1.2.1",
    "grunt": "~0.3.17",
    "wd": "git://github.com/admc/wd.git",
    "assert": "~0.4.9",
    "grunt-mocha-test": "0.0.1",
    "request": "~2.12.0",
    "winston": "~0.6.2",
    "difflib": "~0.2.4",
    "prompt": "~0.2.9"
  },
  "contributors": [
    {
      "name": "Authors ordered by first contribution"
    },
    {
      "name": "Dan Cuellar",
      "email": "dancuellar@me.com"
    },
    {
      "name": "E. James Infusino",
      "email": "jinfusino@gmail.com"
    },
    {
      "name": "Jason Huggins",
      "email": "hugs@saucelabs.com"
    },
    {
      "name": "Jason Carr",
      "email": "jcarr@saucelabs.com"
    },
    {
      "name": "Jayme Deffenbaugh",
      "email": "jdeffenbaugh@me.com"
    },
    {
      "name": "Roman Salvador",
      "email": "roman.salvador@gmail.com"
    },
    {
      "name": "Luke Inman-Semerau",
      "email": "luke.semerau@gmail.com"
    },
    {
      "name": "Pradeep Bishnoi",
      "email": "pradeepbishnoi@gmail.com"
    },
    {
      "name": "Charles Nowacek",
      "email": "charlie.nowacek@gmail.com"
    },
    {
      "name": "Jayakumar Chinnappan",
      "email": "jayakumareee21@gmail.com"
    },
    {
      "name": "Robin Keller",
      "email": "robinthekeller@gmail.com"
    },
    {
      "name": "Adam Christian",
      "email": "adam.christian@gmail.com"
    },
    {
      "name": "Jonathan Lipps",
      "email": "jlipps@gmail.com"
    },
    {
      "name": "Sebastian Tiedtke",
      "email": "sebastiantiedtke@gmail.com"
    },
    {
      "name": "Jeremy Avnet"
    },
    {
      "name": "Bernard Kobos",
      "email": "bkobos@extensa.pl"
    },
    {
      "name": "Santiago Suarez OrdoÃ±ez",
      "email": "santiycr@gmail.com"
    },
    {
      "name": "Joe Mathes"
    }
  ],
  "readme": "Appium\n=========\n\n[![Build Status](https://api.travis-ci.org/appium/appium.png?branch=master)](https://travis-ci.org/appium/appium)\n\nAppium is an open source test automation tool for native and hybrid\nmobile apps. It supports iOS today and Android support is in the\nworks. Appium drives Apple's UIAutomation library using Selenium's\nWebDriver JSON wire protocol. Appium is based on\n[Dan Cuellar's](http://github.com/penguinho) work on iOS Auto.\n\nTesting with Appium has two big benefits:\n\n1.  You don't have to recompile your app or modify it in any way because\n    Appium's automation is based on Apple's UIAutomation library.\n\n2.  You can write tests with your favorite dev tools using Java, JavaScript,\n    PHP, Python, Ruby, C#, or Perl with the Selenium WebDriver API and\n    language-specific client libraries. If you use the UIAutomation library\n    without Appium you can only write tests using JavaScript and you can only\n    run tests through the Instruments application.\n\nRequirements\n------------\n\n    > Mac OS X 10.6 or higher\n    > XCode\n    > Apple Developer Tools (iPhone simulator, command line tools)\n    > Node and npm (http://www.nodejs.org)\n\nUser Quick Start\n------------\nGet something working with a quickness.\n\n    > mkdir appium-test && cd appium-test\n    > sudo npm install appium -g\n    > npm install wd\n    > curl -O https://raw.github.com/appium/appium/master/sample-code/examples/node/simplest.js\n    > appium &\n    > node simplest.js\n\nExample Tests: [Node.js](https://github.com/appium/appium/tree/master/sample-code/examples/node) | [Python](https://github.com/appium/appium/tree/master/sample-code/examples/python) | [PHP](https://github.com/appium/appium/tree/master/sample-code/examples/php) | [Ruby](https://github.com/appium/appium/tree/master/sample-code/examples/ruby) | [Java](https://github.com/appium/appium/tree/master/sample-code/examples/java)\n\nWe support a sub-set of the [Selenium JSON Wire Protocol](https://github.com/appium/appium/wiki/JSON-Wire-Protocol:-Supported-Methods).\n\nWe also have several extensions to the JSON Wire Protocol for [automating\nmobile\ngestures](https://github.com/appium/appium/wiki/Automating-mobile-gestures)\nlike tap, flick, and swipe.\n\nYou can also automate web views in hybrid apps! See the [hybrid app\nguide](https://github.com/appium/appium/wiki/Testing-Hybrid-Apps)\n\n\n- - -\n\nDeveloping on Appium\n------------\nInstall [node.js](http://nodejs.org/) (includes npm, the node.js package manager).\n\nFork the Appium repo ( [https://github.com/appium/appium](https://github.com/appium/appium) ), then clone your fork.\n\nFrom your local repo clone's command prompt, install these packages using the\nfollowing commands:\n\n    > sudo npm install -g mocha\n    > sudo npm install -g grunt\n    > npm install\n\nThe first two commands install test and build tools (sudo may not be necessary\nif you installed node.js via Homebrew). The third command installs all app\ndependencies.\n\nTo avoid a security dialog that may appear when launching your iOS apps you'll\nhave to modify your `/etc/authorization` file in one of two ways:\n\n1.  Manually modify the element following &lt;allow-root&gt; under\n    &lt;key&gt;system.privilege.taskport&lt;/key&gt; in your\n    `/etc/authorization` file to &lt;true/&gt;.\n\n2.  Run the following grunt command which automatically modifies your\n    `/etc/authorization` file for you:\n\n    > sudo grunt authorize\n\n**Important Note:** Making this modification to your `/etc/authorization` file\ngrants access privileges to all members belonging to your `_developer` group.\n\nRunning Tests\n-----------\nDownload UICatalog:\n\n    > grunt downloadApp\n\nBuild an app (if the functional tests fail, try running these grunt commands\nagain):\n\n    > grunt buildApp:UICatalog\n    > grunt buildApp:TestApp\n\nRun all functional tests:\n\n    > grunt functional\n\nNote: we use [wd](http://github.com/admc/wd) as the Selenium client in our\nfunctional tests. Because of the work we are doing to extend the WebDriver\nprotocol, we use the development version of wd. If you've installed wd in some\nother way, you might need to do this in the Appium project directory to get the\ntests to run successfully:\n\n    > rm -rf node_modules/wd\n    > npm install .\n\nRun unit tests:\n\n    > grunt unit\n\nRun all tests:\n\n    > grunt test\n\nBefore committing code, please run grunt to execute some basic tests and check\nyour changes against code quality standards:\n\n    > grunt\n    Running \"lint:all\" (lint) task\n    Lint free.\n\n    Done, without errors.\n\nMore Stuff and Some Low-Level Tips\n-----------\nBy default, `grunt buildApp` builds apps using the iPhone 6.1 simulator SDK.\nYou can overwrite the simulator by passing another SDK to grunt (to figure out\nwhich SDKs you have available, try `xcodebuild -showsdks`:\n\n    > grunt buildApp:UICatalog:iphonesimulator6.0\n\nIf you want to run the Appium server and have it listen indefinitely, you can\nexecute one of the following commands to start an Appium server with or without a specified app:\n\n    > grunt appium           // launch Appium server without app\n    > grunt appium:TestApp   // launch Appium server with the TestApp\n    > grunt appium:UICatalog // launch Appium server with the UICatalog app\n\nThen you can run individual test files using Mocha, for example:\n\n    > mocha -t 60000 -R spec test/functional/testapp/simple.js\n\nDo you like getting close to the metal? Or are you trying to launch an Appium\nserver from a script with a custom app? If so you can start Appium without\ngrunt from the command line with an app or without an app. (See\n[parser.js](https://github.com/appium/appium/blob/master/app/parser.js) for\nmore CLI arguments.)\n\n    > node server.js -V 1  // launch Appium server without app\n    > node server.js --app /absolute/path/to/app -V 1  // launch Appium server with app\n    > node server.js --launch 1 // pre-launch the app when appium loads\n    > node server.js --log /my/appium.log // log to file instead of stdout\n    > node server.js --warp 1 // use unsupported system-crashing speedup tech\n\nIn this case, the app has to be compiled for the iPhone simulator, for example\nby executing the following command in the Xcode project:\n\n    > xcodebuild -sdk iphonesimulator6.0\n\nThis creates a `build/Release-iphonesimulator` directory in your Xcode project\nthat contains the `.app` package that you'll need to communicate with the\nAppium server.\n\nUsing with a [Bitbeambot](http://bitbeam.org)\n-----------\nAWAITING THE FUTURE\n\nContributing\n------------\nFork the project, make a change, and send a pull request!\n\nProject Credits & Inspiration\n------------\nThe open source community has made this project possible, please add missing projects to the list.\n\n[All the OSS code contributing to Appium](https://github.com/appium/appium/wiki/Credits)\n\nMailing List\n-----------\n[Discussion Group](https://groups.google.com/d/forum/appium-discuss)\n",
  "readmeFilename": "README.md",
  "_id": "appium@0.0.12",
  "dist": {
    "shasum": "134f85a16c137dccfbf0dd460f88729afd10723e"
  },
  "_from": "appium@git://github.com/appium/appium.git"
}
